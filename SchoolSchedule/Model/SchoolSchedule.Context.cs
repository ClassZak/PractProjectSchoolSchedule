//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolSchedule.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SchoolScheduleEntities : DbContext
    {
        public SchoolScheduleEntities()
            : base("name=SchoolScheduleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Group> Groups { get; set; }
        public DbSet<Lesson> Lessons { get; set; }
        public DbSet<Schedule> Schedules { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<Subject> Subjects { get; set; }
        public DbSet<Teacher> Teachers { get; set; }
        public DbSet<TeacherPhone> TeacherPhones { get; set; }
    
        public virtual ObjectResult<ShowLessonsAtDayForTeacher_Result> ShowLessonsAtDayForTeacher(string surname, string name, string patronymic, Nullable<System.DateTime> date)
        {
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var patronymicParameter = patronymic != null ?
                new ObjectParameter("patronymic", patronymic) :
                new ObjectParameter("patronymic", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowLessonsAtDayForTeacher_Result>("ShowLessonsAtDayForTeacher", surnameParameter, nameParameter, patronymicParameter, dateParameter);
        }
    
        public virtual ObjectResult<ShowStudentsByGroup_Result> ShowStudentsByGroup(Nullable<int> year, string name)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowStudentsByGroup_Result>("ShowStudentsByGroup", yearParameter, nameParameter);
        }
    }
}
